<Project>
  <Import Project="Xamarin.Android.Lite.props" Condition=" '$(XamarinAndroidLiteImported)' != 'True' " />
  <Target Name="ResolveSdks">
    <Error Text="Xamarin.Android.Lite requires Xamarin.Android is installed!" Condition=" '$(XamarinAndroidPath)' == '' Or !Exists('$(XamarinAndroidPath)') " />
    <ResolveSdks
      AndroidSdkPath="$(AndroidSdkDirectory)"
      AndroidNdkPath="$(AndroidNdkDirectory)"
      JavaSdkPath="$(JavaSdkDirectory)">
      <Output TaskParameter="AndroidSdkPath"           PropertyName="AndroidSdkDirectory"      Condition=" '$(AndroidSdkDirectory)' == '' " />
      <Output TaskParameter="AndroidNdkPath"           PropertyName="AndroidNdkDirectory"      Condition=" '$(AndroidNdkDirectory)' == '' " />
      <Output TaskParameter="JavaSdkPath"              PropertyName="JavaSdkDirectory"         Condition=" '$(JavaSdkDirectory)' == '' " />
      <Output TaskParameter="AndroidSdkBuildToolsPath" PropertyName="AndroidSdkBuildToolsPath" Condition=" '$(AndroidSdkBuildToolsPath)' == '' " />
      <Output TaskParameter="ApkSignerJar"             PropertyName="ApkSignerJar"             Condition=" '$(ApkSignerJar)' == '' " />
      <Output TaskParameter="ZipAlignPath"             PropertyName="ZipAlignToolPath"         Condition=" '$(ZipAlignToolPath)' == '' " />
    </ResolveSdks>
    <PropertyGroup>
      <AndroidSdkDirectory     Condition=" '$(AndroidSdkDirectory)' != '' And !HasTrailingSlash('$(AndroidSdkDirectory)') ">$(AndroidSdkDirectory)\</AndroidSdkDirectory>
      <AndroidNdkDirectory     Condition=" '$(AndroidNdkDirectory)' != '' And !HasTrailingSlash('$(AndroidNdkDirectory)') ">$(AndroidNdkDirectory)\</AndroidNdkDirectory>
      <JavaSdkDirectory        Condition=" '$(JavaSdkDirectory)' != '' And !HasTrailingSlash('$(JavaSdkDirectory)') ">$(JavaSdkDirectory)\</JavaSdkDirectory>
      <AdbToolPath             Condition=" '$(AndroidSdkDirectory)' != '' ">$(AndroidSdkDirectory)platform-tools\</AdbToolPath>
      <JavaToolPath            Condition=" '$(JavaSdkDirectory)' != '' ">$(JavaSdkDirectory)bin</JavaToolPath>
      <AndroidPackageName      Condition=" '$(AndroidPackageName)' == '' ">com.$(AssemblyName.ToLowerInvariant())</AndroidPackageName>
      <SourceApkFile           Condition=" '$(SourceApkFile)' == '' ">$(MSBuildThisFileDirectory)com.xamarin.android.lite.apk</SourceApkFile>
      <AndroidApkFile          Condition=" '$(AndroidApkFile)' == '' ">$(OutputPath)$(AndroidPackageName).apk</AndroidApkFile>
      <AndroidApkFileSigned    Condition=" '$(AndroidApkFileSigned)' == '' ">$(AndroidApkFile.Replace('.apk', '-Signed.apk'))</AndroidApkFileSigned>
      <AndroidApplicationClass Condition=" '$(AndroidApplicationClass)' == '' ">$(RootNamespace).App, $(AssemblyName)</AndroidApplicationClass>
      <AndroidApiLevel>27</AndroidApiLevel>
      <IntermediateProps>$(IntermediateOutputPath)Xamarin.Android.Lite.props</IntermediateProps>
      <AndroidManifest>$(IntermediateOutputPath)AndroidManifest.xml</AndroidManifest>
    </PropertyGroup>
  </Target>
  <Target Name="_FindApkInputs">
    <ItemGroup>
      <_Properties Include="AndroidPackageName=$(AndroidPackageName)" />
      <_Properties Include="AndroidApplicationClass=$(AndroidApplicationClass)" />
      <_Properties Include="AndroidVersionCode=$(AndroidVersionCode)" />
      <_Properties Include="AndroidVersionName=$(AndroidVersionName)" />
    </ItemGroup>
    <WriteLinesToFile
      File="$(IntermediateProps)"
      Lines="@(_Properties)"
      Overwrite="True"
      WriteOnlyWhenDifferent="True"
    />
    <ItemGroup>
      <AssembliesToDeploy Include="$(OutputPath)*.dll" />
      <FileWrites Include="$(IntermediateProps)" />
    </ItemGroup>
  </Target>
  <Target Name="_GenerateManifest" Inputs="$(IntermediateProps)" Outputs="$(AndroidManifest)">
    <GenerateManifest
      DestinationFile="$(AndroidManifest)"
      PackageName="$(AndroidPackageName)"
      ApplicationClass="$(AndroidApplicationClass)"
      VersionCode="$(AndroidVersionCode)"
      VersionName="$(AndroidVersionName)"
    />
    <ItemGroup>
      <FileWrites Include="$(AndroidManifest)" />
    </ItemGroup>
  </Target>
  <Target Name="_CopySourceApk">
    <Copy SourceFiles="$(SourceApkFile)" DestinationFiles="$(AndroidApkFile)" SkipUnchangedFiles="True" />
    <ItemGroup>
      <FileWrites Include="$(AndroidApkFile)" />
    </ItemGroup>
  </Target>
  <Target Name="_AppendToApk" Inputs="$(AndroidManifest);$(AndroidApkFile)" Outputs="$(AndroidApkFile).stamp">
    <AppendToApk Files="$(AndroidManifest)" Apk="$(AndroidApkFile)" />
    <Touch Files="$(AndroidApkFile).stamp" AlwaysCreate="True" />
    <ItemGroup>
      <FileWrites Include="$(AndroidApkFile).stamp" />
    </ItemGroup>
  </Target>
  <PropertyGroup>
    <SignAndroidPackageDependsOn>
      Build;
      ResolveSdks;
      _FindApkInputs;
      _GenerateManifest;
      _CopySourceApk;
      _AppendToApk;
    </SignAndroidPackageDependsOn>
  </PropertyGroup>
  <Target Name="SignAndroidPackage" DependsOnTargets="$(SignAndroidPackageDependsOn)" Inputs="$(AndroidApkFile)" Outputs="$(AndroidApkFileSigned)">
    <PropertyGroup>
      <AndroidSigningKeyStore  Condition=" '$(AndroidSigningKeyStore)' == '' ">$(LocalAppData)\Xamarin\Mono for Android\debug.keystore</AndroidSigningKeyStore>
      <AndroidSigningKeyAlias  Condition=" '$(AndroidSigningKeyAlias)' == '' ">androiddebugkey</AndroidSigningKeyAlias>
      <AndroidSigningKeyPass   Condition=" '$(AndroidSigningKeyPass)' == '' ">android</AndroidSigningKeyPass>
      <AndroidSigningStorePass Condition=" '$(AndroidSigningStorePass)' == '' ">android</AndroidSigningStorePass>
    </PropertyGroup>
    <Delete Files="$(AndroidApkFileSigned)" />
    <ZipAlign
      Source="$(AndroidApkFile)"
      Destination="$(AndroidApkFileSigned)"
      ToolPath="$(ZipAlignToolPath)"
      ToolExe="$(ZipalignToolExe)"
    />
    <ApkSigner
      ApkSignerJar="$(ApkSignerJar)"
      ApkToSign="$(AndroidApkFileSigned)"
      KeyStore="$(AndroidSigningKeyStore)"
      KeyAlias="$(AndroidSigningKeyAlias)"
      KeyPass="$(AndroidSigningKeyPass)"
      StorePass="$(AndroidSigningStorePass)"
      ToolPath="$(JavaToolPath)"
      ToolExe="$(JavaToolExe)"
      AdditionalArguments="$(AndroidApkSignerAdditionalArguments)"
    />
  </Target>
  <Target Name="_DetectRuntime">
    <DetectPackages
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)"
      ApiLevel="$(AndroidApiLevel)"
      PackageName="$(AndroidPackageName)">
      <Output PropertyName="_RuntimeVersion" TaskParameter="RuntimeVersion" />
      <Output PropertyName="_PlatformRuntimeVersion" TaskParameter="PlatformRuntimeVersion" />
      <Output PropertyName="_PackageVersion" TaskParameter="PackageVersion" />
    </DetectPackages>
  </Target>
  <Target Name="_GetAbi" Condition=" '$(_RuntimeVersion)' == '' Or '$(_PlatformRuntimeVersion)' == '' ">
    <GetAbi
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)">
      <Output PropertyName="_PreferredAbi" TaskParameter="PreferredAbi" />
      <Output PropertyName="_SupportedAbis" TaskParameter="SupportedAbis" />
    </GetAbi>
  </Target>
  <Target Name="_InstallRuntime" DependsOnTargets="_GetAbi" Condition=" '$(_RuntimeVersion)' == '' ">
    <PropertyGroup>
      <_SharedRuntime>$(XamarinAndroidPath)Mono.Android.DebugRuntime-$(_PreferredAbi).apk</_SharedRuntime>
    </PropertyGroup>
    <Error Text="Cannot install shared Mono runtime, could not determine device's ABI." Condition=" '$(_PreferredAbi)' == '' " />
    <Error Text="Cannot install shared Mono runtime, $(_SharedRuntime) not found." Condition=" !Exists('$(_SharedRuntime)') " />
    <Adb
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)"
      Command="install -r &quot;$(_SharedRuntime)&quot;"
    />
  </Target>
  <Target Name="_InstallPlatformRuntime" DependsOnTargets="_GetAbi" Condition=" '$(_PlatformRuntimeVersion)' == '' ">
    <PropertyGroup>
      <_PlatformRuntime>$(MSBuildThisFileDirectory)\Mono.Android.Platform.ApiLevel_$(AndroidApiLevel).apk</_PlatformRuntime>
    </PropertyGroup>
    <Error Text="Cannot install API $(AndroidApiLevel) runtime, $(_PlatformRuntime) not found." Condition=" !Exists('$(_PlatformRuntime)') " />
    <Adb
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)"
      Command="install -r &quot;$(_PlatformRuntime)&quot;"
    />
  </Target>
  <Target Name="_CheckApk"  Condition=" '$(_PackageVersion)' == '' ">
    <Delete Files="$(AndroidApkFileSigned).upload.stamp" />
  </Target>
  <Target Name="_FindDirectories">
    <GetExternalStorageDirectory
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)"
      PackageName="$(AndroidPackageName)">
      <Output ItemName="_FastDevDirectories" TaskParameter="Directories" />
      <Output PropertyName="_ExternalStorageDirectory" TaskParameter="ExternalStorageDirectory" />
    </GetExternalStorageDirectory>
  </Target>
  <Target Name="_InstallApk" Inputs="$(AndroidApkFileSigned)" Outputs="$(AndroidApkFileSigned).upload.stamp">
    <Adb
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)"
      Command="install -r &quot;$(AndroidApkFileSigned)&quot;"
    />
    <CreateProperty Value="True">
      <Output TaskParameter="ValueSetByTask" PropertyName="_ApkWasInstalled"/>
    </CreateProperty>
    <!--TODO: custom task here so we don't use ContinueOnError=True, it causes warnings-->
    <Adb
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)"
      Command="shell mkdir &quot;%(_FastDevDirectories.Identity)&quot;"
      ContinueOnError="True"
    />
    <Touch Files="$(AndroidApkFileSigned).upload.stamp" AlwaysCreate="True" />
    <ItemGroup>
      <FileWrites Include="$(AndroidApkFileSigned).upload.stamp" />
    </ItemGroup>
  </Target>
  <PropertyGroup>
    <InstallDependsOn>
      SignAndroidPackage;
      _DetectRuntime;
      _InstallRuntime;
      _InstallPlatformRuntime;
      _CheckApk;
      _FindDirectories;
      _InstallApk;
    </InstallDependsOn>
  </PropertyGroup>
  <Target Name="Install" DependsOnTargets="$(InstallDependsOn)">
    <KillApp
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)"
      PackageName="$(AndroidPackageName)"
      Condition=" '$(_ApkWasInstalled)' != 'True' "
    />
    <Adb
      ToolPath="$(AdbToolPath)"
      ToolExe="$(AdbToolExe)"
      Command="push &quot;%(AssembliesToDeploy.Identity)&quot; &quot;$(_ExternalStorageDirectory)&quot;"
    />
  </Target>
  <Target Name="_CleanXamarinAndroidLite">
    <ItemGroup>
      <_FilesToDelete Include="$(IntermediateProps)" />
      <_FilesToDelete Include="$(AndroidManifest)" />
      <_FilesToDelete Include="$(AndroidApkFile)" />
      <_FilesToDelete Include="$(AndroidApkFile).stamp" />
      <_FilesToDelete Include="$(AndroidApkFileSigned)" />
    </ItemGroup>
    <Delete Files="@(_FilesToDelete)" />
  </Target>
</Project>